version: '3.8'

# Production overrides for docker-compose.yml
services:
  chimera-app:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://chimera:${POSTGRES_PASSWORD}@postgres:5432/chimera_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  chimera-dashboard:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://chimera:${POSTGRES_PASSWORD}@postgres:5432/chimera_db
      - REDIS_URL=redis://redis:6379
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  postgres:
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  redis:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  nginx:
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  prometheus:
    volumes:
      - ./docker/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  grafana:
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana/
    volumes:
      - grafana_prod_data:/var/lib/grafana
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  celery-worker:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://chimera:${POSTGRES_PASSWORD}@postgres:5432/chimera_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    deploy:
      replicas: 4
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  celery-beat:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://chimera:${POSTGRES_PASSWORD}@postgres:5432/chimera_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: chimera-loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - chimera-network
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

  # Log collection
  promtail:
    image: grafana/promtail:latest
    container_name: chimera-promtail
    volumes:
      - ./logs:/var/log/chimera
      - ./docker/promtail/promtail.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - chimera-network
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml

volumes:
  postgres_prod_data:
  prometheus_prod_data:
  grafana_prod_data:
  loki_data:
