version: '3.8'

services:
  # Main Application
  chimera-app:
    build:
      context: .
      target: development
    container_name: chimera-app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://chimera:chimera_password@postgres:5432/chimera_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=dev-secret-key-change-in-production
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8501,http://localhost:8080
      - DEBUG=true
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env
    depends_on:
      - postgres
      - redis
    networks:
      - chimera-network
    restart: unless-stopped

  # Streamlit Dashboard
  chimera-dashboard:
    build:
      context: .
      target: development
    container_name: chimera-dashboard
    ports:
      - "8501:8501"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://chimera:chimera_password@postgres:5432/chimera_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env
    depends_on:
      - postgres
      - redis
      - chimera-app
    networks:
      - chimera-network
    restart: unless-stopped
    command: ["streamlit", "run", "dashboard/main.py", "--server.port=8501", "--server.address=0.0.0.0"]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chimera-postgres
    environment:
      POSTGRES_DB: chimera_db
      POSTGRES_USER: chimera
      POSTGRES_PASSWORD: chimera_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - chimera-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chimera -d chimera_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: chimera-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - chimera-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: chimera-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - chimera-app
      - chimera-dashboard
    networks:
      - chimera-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: chimera-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - chimera-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: chimera-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - chimera-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      target: development
    container_name: chimera-celery-worker
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://chimera:chimera_password@postgres:5432/chimera_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env
    depends_on:
      - postgres
      - redis
    networks:
      - chimera-network
    restart: unless-stopped
    command: ["celery", "-A", "workers.celery_app", "worker", "--loglevel=info"]

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      target: development
    container_name: chimera-celery-beat
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://chimera:chimera_password@postgres:5432/chimera_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env
    depends_on:
      - postgres
      - redis
    networks:
      - chimera-network
    restart: unless-stopped
    command: ["celery", "-A", "workers.celery_app", "beat", "--loglevel=info"]

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  chimera-network:
    driver: bridge
